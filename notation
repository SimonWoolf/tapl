notation

t -> t'
t evaluates to t'

t is in 'normal form':
no evaluation rule applies to it -- there is no t' such that t -> t'

->*
Multi-step evaluation (reflexive transitive closure of one-step evaluation)

nb -- a derivation tree is only for a single step t -> t'. Can be a big tree because congruence rules can nest, even though every branch bottoms out at a single axiom

--
===============
lambda calculus
===============

λx.y is λ(x) = y

y z is y applied to z

application is left-associative:
s t u = (s t) u

bodies of lambda abstractions are taken 'as far to the right' as you can
λx.λy.x y = λx.(λy.(x y)), not λx.((λy.x) y)

The only 'inference rule' is 'beta reduction'
(λx.t_12) t_2 = [x -> t_2]t_12
i.e. replace x by t_2 in the body of t_12
the left hand side is a 'redex' (reducible expression)

'closed' term has no free variables
'combinator' is a closed term
e.g λx.x, i.e. the identity function

evaluation strategies
=====================

'full beta-reduction' - can reduce any redex at any time. (Problem: not guaranteed uniqueness, so evaluation is not a partial function)
'normal-order evaluation' - start from the leftmost (ie outermost) redex
'call by name' - like normal-order, but you can't reduce inside the body of a function.
(Haskell uses a variant of this called 'lazy evaluation' - first time an arg is evaluated all occurances of that arg are replaced by the result. I.e abstract syntax graph rather than tree)
'call by value' - liek call by name (so you can't evaluate inside the body of an abstraction), but evaluate all arguments first (so only evaluate a redex after its right-hand side is an irreducible value). (what SICP calls applicative-order evaluation)

Currying
========

instead of f = λ(x, y).s, do f = λx.λy.s.
Then have
f v w
= (f v) w
= λy.[x->v]s w
= [x->v][y->w]s

Church booleans
===============
tru = λt.λf.t
fls = λt.λf.f
combinators:
test = λb.λi.λe.b i e
(so `test bool iftrue else` evaluates as expected)
and = λa.λḃ.a b fls
or = λa.λb.a tru b
not = λa.a fls tru

Pairs:
pair = λx.λy.λb.b x y
fst = λp.p tru
snd = λp.p fls

Church numerals
===============
zero = λf.λx.x
one = λf.λx.f x
two = λf.λx.f (f x)
etc

succ = λn.λf.λx.f (n f x)
altsucc = λn.λf.λx.n f (f x)

plus = λn.λm.λḟ.λx.n f (m f x)
times = λn.λm.n (plus m) zero
alttimes = λn.λm.λx.n (m f) x
because n is an nifier
(or λn.λm.λx.n (m f) x)

my notes from SICP section on church numerals:
--
three is a threeifier, a thing that makes 'do f'
into 'do f.f.f' (. = function composition).

So addition: a + b -> \f -> ( \x -> a(f)( b(f)(x)) )
(do the f's from b to x, then the f's from a)
multiplication: a*b -> \f -> ( a(b(f)) )
(each of the f's in b substitutes all the f's in a)
(i.e. a.b where . = function composition)
exponentiation: a^b -> (b(a))
(each of the f's in b substitutes for a itself -- i.e.
a 'threeifier')
tetration: ...?
--

iszero = λn. n (λx.fls) tru


prd = λn. fst (n (λp. pair (snd p) (succ (snd p))) (pair zero zero))
i.e. this creates 'double numerals' of pairs (c_i c_{i+1}) (with zero = c_0
c_0), from zero up to n, then picks the first of the last pair.

sub = λa.λb.λf.λx. a prd (b f x)
or
λa.λb.λf. a prd (b f)
or
λa.λb. a prd b
(remember left-associative, so this is `(a prd) b`)
need to think about this

equal = λa.λb. and (iszero (a prd b)) (iszero (b prd a))

Lists
=====
lists can be represented by their right-fold fn, e.g.
[a, b, c] becomes
λproc.λinitial. proc a (proc b (proc c initial))

nil = λproc.λinitial. initial
(same as zero and false :) )

cons = λhead.λtail.λproc. proc head (list proc)

isnil = λlist. list (λitem.λacc fls) tru

head = λlist. (λitem.λacc. item) nil

tail = λlist. (λitem.λacc. test (isnil acc) item acc) nil
i.e. pick the element just before the initial, which is the tail.
this works as long as the list doesn't contain any nils....

Recursion
=========

The divergent combinator
omega = (λx. x x)(λx. x x)
can't be evaluated to a normal form -- reducing it gives omega again

fix = λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))
a fixed-point combinator

given some recursively-defined function f
define g = λf.<body containing f>
then h = fix g
