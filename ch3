ch 3
====

Ex 3.2.4
Each S_i has 3 + 3.|S_{i-1}| + (|S_{i-1}| permute 3)
nPr = n! / (n-r)!
So:
S_1 = 3
S_2 = 3 + 9 + 3! = 18
S_3 = 3 + 54 + 4896 = 4953

EDIT: No! the t_i's do not have to be distinct. Actual answer is
Each S_i has 3 + 3.|S_{i-1}| + |S_{i-1}|^3
So:
S_1 = 3
S_2 = 3 + 9 + 3^3 = 39
S_3 = 3 + 117 + 59319 = 59439

-----
Ex 3.2.5
By induction:
S_0 is a subset of S_1 - trivial; the empty set is a subset of every set.
Given S_{i-1} is a subset of S_i,
every t_i in s_{i-1} is also in S_i.
So every element of S_i constructed from those t_i will also appear in S_{i+1}
(and {true, false, 0} is a subset of every S_i)

-----
Ex 3.3.4
Suffices to show that if true for all els of S_i, it's true for all els of S_{i+1}; then can apply normal natural number induction on i. So go through els of S_{i+1} for each kind of induction.

- Induction on depth:
constants: trivial, P true for all elements of the empty set
succ/pred/iszero: depth(succ t_1) > depth(t1), etc
if...: depth(if t_1 then t_2 else t_3) = 1 + max(depth(t_1,2,3)) > any of depth(t_1,2,3)

- Induction on size:
follows similarly, but the 'if' case is:
if...: size(if t_1 then t_2 else t_3) = 1 + sum(size(t_1,2,3)) > any of size(t_1,2,3)

- Structural induction:
constants: trivial, P true for all elements of the empty set
succ/pred/iszero: follows from each in S_{i+1} being a function of terms in S_i

-----
Ex. 3.3.5
If, for each step of a derivation s,
  given P(r) for all derivations r that immediately precede s,
  we can show P(s)
The P(s) holds for all s.

-----
Ex 3.5.10
(not sure what he's looking for here? These are inference rules but they're just the requireents of 3.5.9, this can't be it)
1. t -> t' |- t ->* t'
2. |- t ->* t
3. t ->* t' and t' ->* t'' |- t ->* t''


-----
Ex 3.5.13
Given E-Funny1 (if true then t_2 else t_3 -> t_3):
- 3.5.4 - wrong. e.g. 'if true then false else true' -> false (by E-IfTrue) and true (by E-Funny1)
- 3.5.7 - still right
- 3.5.8 - still right
- 3.5.11 - wrong, same counterexample as 3.5.4
- 3.5.12 - still basically right, although 'some' can now mean >=1

Given E-Funny2 (t_2 -> t'_2 |- if t_1 then t_2 else t_3 -> if t_1 then t'_2 else t_3):

- 3.5.4 - Wrong. Trouble is that E.g.
t': apply E-If to t, to give if t'_1 then t_2 else t_3
t'': apply E-Funny2 to t, to give if t_1 then t'_2 else t_3
so t' != t''.
(But -- they are equivalent in the sense that t' -> t'' (by applying E-Funny2), and t'' -> t' (by applying E-If))

- 3.5.7 - still right
- 3.5.8 - still right
- 3.5.11 - still right! the counterexample from 3.5.4 is not a counterxample for multi-step evaluation, since the two evaluate to each other, so will end up at the same value. Needs a more complicated proof though: need to show that every evaluation path leads to the same normal form.
- 3.5.12 - still right

-----
Ex 3.5.14
case: last rule in tree of t':
- E-Succ: t was then succ(t_1), for some t_1 -> t'_1. By induction step, that t'_1 is unique. No other eval rule applies to something of that form.
etc. etc.

-----
Ex 3.5.16
Say that the two treatments agree if (term x evaluates to a stuck expression in the first treatment) iff (term x evaluates to wrong in the second treatment)

(define stuckT and wrongT as the first, second treatments respectively)
Proof:
Assume determinacy of one-step evaluation. Then:

- wrong in wrongT -> stuck in wrongS:
for any evaluation step 't -> wrong' in wrongT,
there is no evaluation rule that applies to t in wrongS (else there would be >1 in wrongT)
then either t is a value or else not normal
but there are no rules in wrongT which evaluate a value to wrong
therefore it's stuck in wrongS.

- stuck in wrongS -> wrong in wrongT:
suffices to show that there are no stuck expressions in wrongT. Proof by structural induction.

- not stuck in wrongS -> not wrong in wrongT, and vice versa: follows from uniqueness of normal forms in both systems.

-----
Ex 3.5.17

Structural induction
- case: if t_1 then t_2 else t_3
In small-step semantics, say t_1 ->* true, then by E-IfTrue, this -> t_2. Say t_2 ->* v_2, then it ->* v_2, matching B-IfTrue. Similarly for false.

Repeat for all the possible forms of t.

-----
Ex. 3.5.18
Applicative-order if statement:
Instead of E-If, have
(t_2 -> t'_2) |- (if t_1 then t_2 else t_3) -> (if t_1 then t'_2 else t_3)
(t_3 -> t'_3) |- (if t_1 then bool_1 else t_3) -> (if t_1 then bool_1 else t'_3)
(t_1 -> t'_1) |- (if t_1 then bool_1 else bool_2) -> (if t'_1 then bool_1 else bool_2)

(where bool_i means only using bools in the rule scheme rather than any term)
